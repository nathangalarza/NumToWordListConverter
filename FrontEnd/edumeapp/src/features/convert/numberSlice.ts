import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';
// import { fetchCount } from './counterAPI';

export interface NumberState {
    value: string;
    isEmpty: boolean;
}

const initialState: NumberState = {
    value: '',
    isEmpty: false,
  };

  
export const numberSlice = createSlice({
    name: 'number',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
      addInput: (state) => {
        // Redux Toolkit allows us to write "mutating" logic in reducers. It
        // doesn't actually mutate the state because it uses the Immer library,
        // which detects changes to a "draft state" and produces a brand new
        // immutable state based off those changes
        state.value += state;
      },
      removeInput: (state) => {
        // state.value -= 1;
      },
      // Use the PayloadAction type to declare the contents of `action.payload`
     
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    // extraReducers: (builder) => {
    //   builder
    //     .addCase(incrementAsync.pending, (state) => {
    //       state.status = 'loading';
    //     })
    //     .addCase(incrementAsync.fulfilled, (state, action) => {
    //       state.status = 'idle';
    //       state.value += action.payload;
    //     });
    // },
  });
  export const { addInput, removeInput } = numberSlice.actions;

  export const selectNumber = (state: RootState) => state.number.value;


  export default numberSlice.reducer;